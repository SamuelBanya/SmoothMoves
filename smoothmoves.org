* Title
<2022-09-19 Mon 19:55>: After a bit of deliberation last night, I stumbled upon a decent name for this project, which would include the following:
- Smooth Moves

Reason being is that we used a similarly named moving company recently, and funnily enough, it was not as smooth as we expected so I aim to correct that with this app's experience.

* Ideas
<2022-09-19 Mon 19:56>: These are mentioned in the 'README.md' already for this project, but this is much more inclusive and thought out than my Phase 2 project so I'm already pretty stoked for where this is going as I would have loved to have this kind of app before I moved recently.

* Design Ideas
<2022-09-19 Mon 19:57>: This will include the following design choices:
- Usage of React based forms for the frontend
- "Material UI" will be used as the CSS stylesheet framework

* How I Installed The Backend Components
<2022-09-19 Mon 20:13>: I first used the following command to install the Gem components:
#+begin_src bash
bundle install
#+end_src

* How I Created The Separate Frontend
<2022-09-19 Mon 20:16>: As instructed by the assignment, I created a separate repo folder for the React frontend component:
- https://github.com/SamuelBanya/SmoothMoves-Frontend

I then changed into this directory, and then used the following terminal command:
#+begin_src bash
npx create-react-app smoothmoves-frontend
#+end_src

Related output:
#+BEGIN_SRC bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3 $ cd SmoothMoves-Frontend/
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves-Frontend $ ls
LICENSE         README.md
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves-Frontend $ npx create-react-app smoothmoves-frontend

Creating a new React app in /Users/samuelbanya/hub/Development/code/phase-3/SmoothMoves-Frontend/smoothmoves-frontend.

Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts with cra-template...


added 1394 packages in 38s

209 packages are looking for funding
  run `npm fund` for details

Installing template dependencies using npm...

added 56 packages in 5s

209 packages are looking for funding
  run `npm fund` for details
Removing template package using npm...


removed 1 package, and audited 1450 packages in 2s

209 packages are looking for funding
  run `npm fund` for details

6 high severity vulnerabilities

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

Success! Created smoothmoves-frontend at /Users/samuelbanya/hub/Development/code/phase-3/SmoothMoves-Frontend/smoothmoves-frontend
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!

We suggest that you begin by typing:

  cd smoothmoves-frontend
  npm start

Happy hacking!
#+END_SRC

* How I Created The Related Migrations For The Related Tables
<2022-09-19 Mon 20:32>: I used the following migration command in terminal to create the necessary migration necessary for the 'User' table:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:create_migration NAME=create_users_table
db/migrate/20220920013221_create_users_table.rb
#+end_src

I then filled the contents of the 'db/migrate/20220920013221_create_users_table.rb' file with the following:
#+begin_src ruby
class CreateUsersTable < ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      t.string :name
      t.string :pickup_location
      t.string :dropoff_location
    end
  end
end
#+end_src

I then ran the related migration with the following 'bundle exec rake db:migrate' command:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:migrate
== 20220920013221 CreateUsersTable: migrating =================================
-- create_table(:users)
   -> 0.0012s
== 20220920013221 CreateUsersTable: migrated (0.0013s) ========================
#+end_src

<2022-09-20 Tue 19:28>: I then created another migration for the 'items' table with the following 'bundle exec rake db:create_migration' command:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:create_migration NAME=create_items_table
db/migrate/20220921003339_create_items_table.rb
#+end_src

I then entered the following inside the 'db/migrate/20220921003339_create_items_table.rb' file:
#+begin_src ruby
class CreateItemsTable < ActiveRecord::Migration[6.1]
  def change
    create_table :items do |t|
      t.string :name
      t.string :owner
      t.integer :length
      t.integer :width
      t.integer :height
      t.integer :weight
      # Values include "loose" or "boxed"
      t.string :item_type
    end
  end
end
#+end_src

I then ran the related migration for the 'bundle exec rake db:migrate' table with the following command:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:migrate
== 20220921003339 CreateItemsTable: migrating =================================
-- create_table(:items)
   -> 0.0013s
== 20220921003339 CreateItemsTable: migrated (0.0013s) ========================
#+end_src

<2022-09-20 Tue 19:58>: I then thought about it for a bit, and realized I actually need a separate 'locations' table since all of the items would have two separate locations which include the 'dropoff_location' and 'pickup_location', so I created an associated migration accordingly:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:create_migration NAME=create_locations_table
db/migrate/20220921013908_create_locations_table.rb
#+end_src

I then modified the 'db/migrate/20220921013908_create_locations_table.rb' file with the following contents:
#+begin_src ruby
class CreateLocationsTable < ActiveRecord::Migration[6.1]
  def change
    create_table :locations do |t|
      t.string :dropoff_location
      t.string :pickup_location
    end
  end
end
#+end_src

I then ran the following 'bundle exec rake db:migrate' command accordingly:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:migrate
== 20220921013908 CreateLocationsTable: migrating =============================
-- create_table(:locations)
   -> 0.0013s
== 20220921013908 CreateLocationsTable: migrated (0.0014s) ====================
#+end_src

I then created the following models under 'app/models':

'app/models/item.rb':
#+begin_src ruby
class Item < ActiveRecord::Base
end
#+end_src

'app/models/location.rb':
#+begin_src ruby
class Location < ActiveRecord::Base
end
#+end_src

'app/models/user.rb':
#+begin_src ruby
class User < ActiveRecord::Base
end
#+end_src

<2022-09-20 Tue 20:50>: I then determined the relationships involved in this particular scenario which include the following:
#+begin_src ascii
    ┌─────►Mover
    │
    │
User├─────►Item
    │
    │
    └─────►Location
#+end_src

<2022-09-20 Tue 21:00>: With this in mind, I then added another migration for the 'movers' table accordingly since each mover will have an associated 'name' and 'email' address for the '/email' route that we want to expose to the frontend later on:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:create_migration NAME=create_movers_table
db/migrate/20220921020149_create_movers_table.rb
#+end_src

I then added the following contents to the 'db/migrate/20220921020149_create_movers_table.rb' file:
#+begin_src ruby
class CreateMoversTable < ActiveRecord::Migration[6.1]
  def change
    create_table :movers do |t|
      t.string :name
      t.string :email
    end
  end
end
#+end_src

<2022-09-20 Tue 21:08>: I then thought of a neat feature to add later which would be the following:
- This would involve a slight bit of extra math, but you can basically do the following:
- Calculate the distance from the first set of movers to the 'pickup_location' which you can then list on the summary page
- Calculate the distance from the second set of movers to the 'dropoff_location' which you can then list on the summary page

I then ran the related migration with this command:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:migrate
== 20220921020149 CreateMoversTable: migrating ================================
-- create_table(:movers)
   -> 0.0015s
== 20220921020149 CreateMoversTable: migrated (0.0016s) =======================
#+end_src

I then added the associated 'app/models/mover.rb' model with the following contents:
#+begin_src ruby
class Mover < ActiveRecord::Base
end
#+end_src

<2022-09-21 Wed 13:40>: Notes From Office Hour Today:
- Add a 'owner_id' to the items table migration
- Drop the 'locations' table and just place it into users

<2022-09-21 Wed>: After talking about these table relationships with my instructor, Ryan Parrish, I realized that the following SQL table relationships make more sense and are exactly aligned to the requirements of the project itself:
- "users" table "has_many" "items"

This relationship itself is reciprocal and because it involves two separate models, it fulfills the requirements of the assignment which is the following:
- Have at least two models with a one-to-many relationship.

I then rolled back my migrations so that I could edit them accordingly:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220921020149 CreateMoversTable: reverting ================================
-- drop_table(:movers)
   -> 0.0017s
== 20220921020149 CreateMoversTable: reverted (0.0046s) =======================

samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220921013908 CreateLocationsTable: reverting =============================
-- drop_table(:locations)
   -> 0.0009s
== 20220921013908 CreateLocationsTable: reverted (0.0030s) ====================

samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220921003339 CreateItemsTable: reverting =================================
-- drop_table(:items)
   -> 0.0009s
== 20220921003339 CreateItemsTable: reverted (0.0030s) ========================

samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220920013221 CreateUsersTable: reverting =================================
-- drop_table(:users)
   -> 0.0009s
== 20220920013221 CreateUsersTable: reverted (0.0035s) ========================
#+end_src

I then removed the 'app/models/location.rb' and 'app/models/mover.rb' models.

I then also removed their associated migrations as well.

I then revised the '20220920013221_create_users_table.rb' file so that a user has a 'dropoff_location' and a 'pickup_location':
#+begin_src ruby
class CreateUsersTable < ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      t.string :name
      t.string :pickup_location
      t.string :dropoff_location
    end
  end
end
#+end_src

I then revised the '20220921003339_create_items_table.rb' file to include the following contents:
#+begin_src ruby
class CreateItemsTable < ActiveRecord::Migration[6.1]
  def change
    create_table :items do |t|
      t.string :name
      t.string :owner
      t.integer :length
      t.integer :width
      t.integer :height
      t.integer :weight
      # Values include "loose" or "boxed"
      t.string :item_type
    end
  end
end
#+end_src

I then re-ran the related 'bundle exec rake db:migrate' command accordingly:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:migrate
== 20220920013221 CreateUsersTable: migrating =================================
-- create_table(:users)
   -> 0.0011s
== 20220920013221 CreateUsersTable: migrated (0.0012s) ========================

== 20220921003339 CreateItemsTable: migrating =================================
-- create_table(:items)
   -> 0.0010s
== 20220921003339 CreateItemsTable: migrated (0.0011s) ========================
#+end_src

I then revised the 'app/models/user.rb' file with the following contents:
#+begin_src ruby
class User < ActiveRecord::Base
    has_many :items
end
#+end_src

I then revised the 'app/models/item.rb' file with the following contents:
#+begin_src ruby
class Item < ActiveRecord::Base
    belongs_to :item
end
#+end_src

<2022-09-21 Wed 20:32>: I then realized I need to have some kind of 'id' based columns so that I can later use it for 'CRUD' type methods within the Application Controller.

With this in mind, I had to re-rollback the database again:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220921003339 CreateItemsTable: reverting =================================
-- drop_table(:items)
   -> 0.0022s
== 20220921003339 CreateItemsTable: reverted (0.0052s) ========================

samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220920013221 CreateUsersTable: reverting =================================
-- drop_table(:users)
   -> 0.0012s
== 20220920013221 CreateUsersTable: reverted (0.0036s) ========================
#+end_src

I then revised the '20220920013221_create_users_table.rb' file with the following contents:
#+begin_src ruby
class CreateUsersTable < ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      t.integer :user_id
      t.string :name
      t.string :pickup_location
      t.string :dropoff_location
    end
  end
end
#+end_src

I then revised the '20220921003339_create_items_table.rb' file with the following contents:
#+begin_src ruby
class CreateItemsTable < ActiveRecord::Migration[6.1]
  def change
    create_table :items do |t|
      t.integer :item_id
      t.string :name
      t.string :owner
      t.integer :length
      t.integer :width
      t.integer :height
      t.integer :weight
      # Values include "loose" or "boxed"
      t.string :item_type
    end
  end
end
#+end_src

I then re-ran the 'db:migrate' command accordingly:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:migrate
== 20220920013221 CreateUsersTable: migrating =================================
-- create_table(:users)
   -> 0.0013s
== 20220920013221 CreateUsersTable: migrated (0.0014s) ========================

== 20220921003339 CreateItemsTable: migrating =================================
-- create_table(:items)
   -> 0.0013s
== 20220921003339 CreateItemsTable: migrated (0.0014s) ========================
#+end_src
* How I Created CRUD Methods Within The Application Controller
<2022-09-21 Wed 21:26>: In order to add CRUD (Create, Read, Update, Delete) methods for the 'users' table, I modified the contents of the 'app/controllers/application_controller.rb' file with the following:
#+begin_src ruby
class ApplicationController < Sinatra::Base
  set :default_content_type, "application/json"

  # Add your routes here
  get "/" do
    { message: "Good luck with your project!" }.to_json
  end

  get "/users" do
    users = User.all()
    users.to_json()
  end

  post "/users" do
    user = User.create(
      name: params[:name],
      pickup_location: params[:pickup_location],
      dropoff_location: params[:dropoff_location]
    )
    user.to_json()
  end

  patch "/users/:id" do
    user = User.find(params[:user_id])
    user.update(
      name: params[:name],
      pickup_location: params[:pickup_location],
      dropoff_location: params[:dropoff_location]
    )
    user.to_json()
  end

  delete "/users/:id" do
    user = User.find(params[:user_id])
    user.destroy()
    user.to_json()
  end
end
#+end_src

I then modified the 'app/controllers/application_controller.rb' file with the following revisions to add "CRUD" methods for the "items" table:
#+begin_src ruby
class ApplicationController < Sinatra::Base
  set :default_content_type, "application/json"

  # Add your routes here
  get "/" do
    { message: "Good luck with your project!" }.to_json
  end

  get "/users" do
    users = User.all()
    users.to_json()
  end

  post "/users" do
    user = User.create(
      name: params[:name]
      pickup_location: params[:pickup_location]
      dropoff_location: params[:dropoff_location]
    )
    user.to_json()
  end

  patch "/users/:id" do
    user = User.find(params[:user_id])
    user.update(
      name: params[:name]
      pickup_location: params[:pickup_location]
      dropoff_location: params[:dropoff_location]
    )
    user.to_json()
  end

  delete "/users/:id" do
    user = User.find(params[:user_id])
    user.destroy()
    user.to_json()
  end

  get "/items" do
    items = Item.all()
    items.to_json()
  end

  post "/items" do
    item = Item.create(
      name: params[:name],
      owner: params[:owner],
      length: params[:length],
      width: params[:width],
      height: params[:height],
      weight: params[:weight],
      item_type: params[:item_type]
    )
    item.to_json()
  end

  patch "/items/:id" do
    item = Item.find(params[:item_id])
    item.update(
      name: params[:name],
      owner: params[:owner],
      length: params[:length],
      width: params[:width],
      height: params[:height],
      weight: params[:weight],
      item_type: params[:item_type]
    )
    item.to_json()
  end

  delete "/items/:id" do
    item = Item.find(params[:item_id])
    item.destroy()
    item.to_json()
  end
end
#+end_src


<2022-09-22 Thu 15:23>: Office Hour Notes:
- I first need to do two related rollbacks using 'bundle exec db:rollback'
- Then I need to make a correction to the key relationships since these are the corrections I need to make:
- This needs to include the following changes in the 'db/migrate/20220921003339_create_items_table.rb' migrations file to include the foreign key, ':user_id':
#+begin_src ruby
class CreateItemsTable < ActiveRecord::Migration[6.1]
  def change
    create_table :items do |t|
      t.integer :user_id
      t.string :name
      t.string :owner
      t.integer :length
      t.integer :width
      t.integer :height
      t.integer :weight
      # Values include "loose" or "boxed"
      t.string :item_type
    end
  end
end
#+end_src
- I need to remove the ':user_id' key in the '20220920013221_create_users_table.rb' file:
#+begin_src ruby
class CreateUsersTable < ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      t.string :name
      t.string :pickup_location
      t.string :dropoff_location
    end
  end
end
#+end_src

<2022-09-22 Thu 15:28>: I then made these revisions and used 'bundle exec rake db:migrate':
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:migrate
== 20220920013221 CreateUsersTable: migrating =================================
-- create_table(:users)
   -> 0.0013s
== 20220920013221 CreateUsersTable: migrated (0.0013s) ========================

== 20220921003339 CreateItemsTable: migrating =================================
-- create_table(:items)
   -> 0.0010s
== 20220921003339 CreateItemsTable: migrated (0.0011s) ========================
#+end_src

<2022-09-22 Thu 15:41>: Office Hour Notes:
- I had to rethink my app yet again because the way my current tables would not be valid as per project requirements
- This is because the current version of my app would assume there are multiple 'users', which is not the case since there is a singular user
- Therefore, I need to change the 'users' table to instead be 'moves' since you can track multiple moves within the single move application

With this in mind, I did two rollbacks yet again:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220921003339 CreateItemsTable: reverting =================================
-- drop_table(:items)
   -> 0.0013s
== 20220921003339 CreateItemsTable: reverted (0.0039s) ========================

samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220920013221 CreateUsersTable: reverting =================================
-- drop_table(:users)
   -> 0.0010s
== 20220920013221 CreateUsersTable: reverted (0.0039s) ========================

samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
#+end_src

I then changed the name of the 'db/migrate/20220920013221_create_users_table.rb' file to the following name:
- 'db/migrate/20220920013221_create_moves_table.rb'

I then changed the contents of the 'db/migrate/20220920013221_create_moves_table.rb' file to the following:
#+begin_src ruby
class CreateMovesTable < ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      t.string :name
      t.string :pickup_location
      t.string :dropoff_location
    end
  end
end
#+end_src

I then changed the contents of the '20220921003339_create_items_table.rb' file to the following:
#+begin_src ruby
class CreateItemsTable < ActiveRecord::Migration[6.1]
  def change
    create_table :items do |t|
      t.integer :move_id
      t.string :name
      t.string :owner
      t.integer :length
      t.integer :width
      t.integer :height
      t.integer :weight
      # Values include "loose" or "boxed"
      t.string :item_type
    end
  end
end
#+end_src

I then changed the 'app/models/user.rb' to the following name:
- 'app/models/move.rb'

I then changed the contents of the 'app/models/move.rb' file to the following:
#+begin_src ruby
class Move < ActiveRecord::Base
    has_many :items
end
#+end_src

I then ran the related migration again:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:migrate
== 20220920013221 CreateMovesTable: migrating =================================
-- create_table(:users)
   -> 0.0010s
== 20220920013221 CreateMovesTable: migrated (0.0011s) ========================

== 20220921003339 CreateItemsTable: migrating =================================
-- create_table(:items)
   -> 0.0010s
== 20220921003339 CreateItemsTable: migrated (0.0011s) ========================
#+end_src

<2022-09-23 Fri 10:39>:

I realized I didn't name the 'moves' table correctly, so I had to roll it back yet again:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220921003339 CreateItemsTable: reverting =================================
-- drop_table(:items)
   -> 0.0012s
== 20220921003339 CreateItemsTable: reverted (0.0037s) ========================

samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:rollback
== 20220920013221 CreateMovesTable: reverting =================================
-- drop_table(:users)
   -> 0.0012s
== 20220920013221 CreateMovesTable: reverted (0.0039s) ========================
#+end_src

I then made the following revisions to the 'db/migrate/20220920013221_create_moves_table.rb' file with the following revisions:
#+begin_src ruby
class CreateMovesTable < ActiveRecord::Migration[6.1]
  def change
    create_table :moves do |t|
      t.string :pickup_location
      t.string :dropoff_location
    end
  end
end
#+end_src

I then re-migrated the tables accordingly:
#+begin_src bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/SmoothMoves $ bundle exec rake db:migrate
== 20220920013221 CreateMovesTable: migrating =================================
-- create_table(:moves)
   -> 0.0010s
== 20220920013221 CreateMovesTable: migrated (0.0011s) ========================

== 20220921003339 CreateItemsTable: migrating =================================
-- create_table(:items)
   -> 0.0010s
== 20220921003339 CreateItemsTable: migrated (0.0010s) ========================
#+end_src
